@startuml Architecture Microservices Deployment

title Architecture Microservices Deployment - PFE031

!define DARKBLUE #052C65
!define LIGHTBLUE #4682B4
!define GREEN #3CB371
!define ORANGE #FFA500
!define GRAY #808080
!define CONTAINER_COLOR #0db7ed
!define CONTAINER_BORDER_COLOR #066da5

skinparam node {
  BorderColor DARKBLUE
  BackgroundColor LIGHTBLUE
  FontColor white
}

skinparam database {
  BorderColor GREEN
  BackgroundColor #E0FFE0
  FontColor DARKBLUE
}

skinparam node<<container>> {
  BackgroundColor CONTAINER_COLOR
  BorderColor CONTAINER_BORDER_COLOR
  StereotypeFontColor white
  FontColor white
  Shadowing true
}

' Define arrow colors
skinparam Arrow {
  Color DARKBLUE
  Thickness 2
}

' Client Layer
node "Client" as client {
  [Client Web] as web
}

' API Gateway Layer
node "API Gateway" as gateway <<container>> {
  [API Service] as api
}

' Core Services - grouped by functionality
package "Core Services" {
  node "Data Management" as dataNode {
    node "Data Service" as data <<container>> {
      [Data Service Logic]
    }
  }
  
  node "ML Pipeline" as mlNode {
    node "Data Processing Service" as dataProcessing <<container>> {
      [Data Processing Logic]
    }
    node "Training Service" as training <<container>> {
      [Training Logic]
    }
    node "Evaluation Service" as evaluation <<container>> {
      [Evaluation Logic]
    }
    node "Deployment Service" as deployment <<container>> {
      [Deployment Logic]
    }
  }
  
  node "Operations" as opsNode {
    node "Orchestration Service" as orchestration <<container>> {
      [Orchestration Logic]
    }
    node "Monitoring Service" as monitoring <<container>> {
      [Monitoring Logic]
    }
  }
  
  node "Content" as contentNode {
    node "News Service" as news <<container>> {
      [News Logic]
    }
    node "Visualization Service" as visualization <<container>> {
    [Visualization Logic]
    }
  }
}

' Data Storage Layer

' Bases de donn√©es

' Database Prefect
database "Database Server Prefect" as dbPrefect <<container>> {
  [Table_prefect] as prefectTable
}

' Database Orchestration
database "Database Server Orchestration" as dbOrch <<container>> {
  [Table_predictions] as predTable
}

' Database Stock Prices
database "Database Server Stock Prices" as dbStock <<container>> {
  [Table_stock_prices] as stockTable
}

' Database Data Processing
database "Database Server Data Processing" as dbDataProcessing <<container>> {
  [Table_processed_data] as processedDataTable
}

' MLflow Servers
node "MLflow Server A" as mlflowA <<container>> {
  [MLflow A] as mlflowServiceA
}

node "MLflow Server B" as mlflowB <<container>> {
  [MLflow B] as mlflowServiceB
}

' Prefect Container
node "Prefect Server" as prefectNode <<container>> {
  [Prefect] as prefect
}

' Monitoring & Visualization Tools
node "Prometheus Server" as prometheus <<container>> {
  [Prometheus] as prometheusService
}

node "Grafana Server" as grafana <<container>> {
  [Grafana] as grafanaService
}

' Connections
web --> api : <color:GREEN>Request</color>

api --> orchestration
api --> data
api --> deployment
api --> news

orchestration <--> prefect
orchestration --> data
orchestration --> training
orchestration --> deployment
orchestration --> dataProcessing
orchestration --> evaluation
orchestration --> dbOrch

prefect --> prefectTable

data --> stockTable
training --> mlflowServiceA
deployment --> mlflowServiceB
dataProcessing --> processedDataTable

monitoring --> deployment
monitoring --> orchestration
monitoring --> data
monitoring --> dataProcessing

api --> visualization
monitoring --> visualization
visualization --> data

' Monitoring connections
monitoring --> prometheusService : emits metrics
grafanaService --> prometheusService : queries metrics (PromQL)

' Show that monitoring can visualize via Grafana
grafanaService --> web : dashboards

@enduml
