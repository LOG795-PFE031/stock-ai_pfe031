@startuml
' Group services in packages for clarity
package "services" {
  class BaseService << abstract >> {
    +initialize(): None
    +cleanup(): None
  }

  class ModelService {
    +save_model(): Dict
    +load_model(): Dict
    +list_models(): List
    +delete_model(): bool
  }

  class DataService {
    +get_stock_data(): Dict
    +get_latest_data(): Dict
  }

  class PredictionService {
    +predict(): Dict
    +start_auto_publishing(): None
  }

  class NewsService {
    +analyze_news(): Dict
    +get_news_data(): Dict
  }

  class TrainingService {
    +train_model(): Dict
    +get_training_status(): Dict
  }

  class VisualizationService {
    +get_stock_chart(): Dict
    +get_prediction_chart(): Dict
  }
}

package "training (new microservices)" {
  class DataPreprocessingService {
    +prepare_data(): Dict
    +create_features(): Dict
    +handle_missing_values(): Dict
    +normalize_data(): Dict
  }

  class ModelTrainingService {
    +train_lstm_model(): Dict
    +train_prophet_model(): Dict
    +get_training_progress(): Dict
    +cancel_training(): Dict
  }

  class ModelEvaluationService {
    +evaluate_model(): Dict
    +calculate_metrics(): Dict
    +generate_evaluation_report(): Dict
  }

  class ModelDeploymentService {
    +deploy_model(): Dict
    +rollback_deployment(): Dict
    +get_deployment_status(): Dict
  }

  class ModelMonitoringService {
    +monitor_model_performance(): Dict
    +detect_model_drift(): Dict
    +trigger_retraining(): Dict
    +generate_monitoring_reports(): Dict
  }
}

class OrchestrationService {
  +initialize(): None
  +cleanup(): None
  +start_training_pipeline(): Dict
  +stop_training_pipeline(): Dict
  +get_pipeline_status(): Dict
}

' Inheritance (keep only)
BaseService <|-- ModelService
BaseService <|-- DataService
BaseService <|-- PredictionService
BaseService <|-- NewsService
BaseService <|-- TrainingService
BaseService <|-- VisualizationService

' Key orchestration relationships (reduce arrows)
OrchestrationService --> TrainingService : manages
OrchestrationService --> PredictionService : manages
OrchestrationService --> ModelMonitoringService : monitors

' Group training pipeline as a note
note right of OrchestrationService
  OrchestrationService coordinates:
  - DataPreprocessingService
  - ModelTrainingService
  - ModelEvaluationService
  - ModelDeploymentService
  - ModelMonitoringService
end note

' Remove most direct arrows, keep only essential ones for readability

@enduml