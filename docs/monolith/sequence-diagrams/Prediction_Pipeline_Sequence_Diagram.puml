@startuml

title Prediction Pipeline - Sequence Diagram

Actor "ML Developper" as User
participant OrchestrationService
participant DataService
participant DataProcessingService
participant DeploymentService


User -> OrchestrationService : GET /predict
activate OrchestrationService

OrchestrationService -> OrchestrationService : run_prediction_pipeline(model_name, symbol)
OrchestrationService -> DeploymentService : list_models()
activate DeploymentService
DeploymentService -> DeploymentService : models_names = ModelManager.list_models()
DeploymentService -> OrchestrationService : Return models_names
deactivate DeploymentService

alt model_name is not in = models_names
    OrchestrationService -> User : 500 Internal Server Error Response
end


OrchestrationService -> DataService : get_stock_data(symbol, start_date, end_date)
activate DataService

alt Data is stale or missing
    DataService -> DataService : collect_stock_data(symbol, start_date, end_date)
end
DataService -> OrchestrationService : Return raw_stock_data
deactivate DataService


OrchestrationService -> DataProcessingService : preprocess(raw_stock_data)
activate DataProcessingService
DataProcessingService -> DataProcessingService : clean_stock_data = DataCleaner.process(raw_stock_data)
DataProcessingService -> DataProcessingService : X = FeatureBuilder.process(clean_stock_data)
DataProcessingService -> DataProcessingService : X = FeatureSelector.process(X)
DataProcessingService -> DataProcessingService : X = InputFormatter.process(X)
DataProcessingService -> DataProcessingService : X = Normalizer.process(X, fit=False)
DataProcessingService -> OrchestrationService : Return X
deactivate DataProcessingService

OrchestrationService -> DeploymentService : predict(model_name, X)
activate DeploymentService

DeploymentService -> DeploymentService : model = ModelManager.load_model(model_name, production=False)
DeploymentService -> DeploymentService : y_pred = Predictor.predict(model, X)

DeploymentService -> OrchestrationService : Return y_pred
deactivate DeploymentService


OrchestrationService -> DataProcessingService : postprocess(y_pred)

activate DataProcessingService
DataProcessingService -> DataProcessingService : y_pred = Normalizer.unprocess(y_pred)
DataProcessingService -> DataProcessingService : y_pred = OutputFormatter.process(y_pred)
DataProcessingService -> OrchestrationService : Return y_pred
deactivate DataProcessingService

OrchestrationService -> DeploymentService : calculate_prediction_confidence(model_name, X, y_pred)
activate DeploymentService
DeploymentService -> OrchestrationService : Return confidence
deactivate DeploymentService


OrchestrationService -> User : 200 OK Response (y_pred, confidence)
deactivate OrchestrationService

@enduml