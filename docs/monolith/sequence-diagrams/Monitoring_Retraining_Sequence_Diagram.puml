@startuml

title Monitor Retraining (Monitoring Service) - Sequence Diagram

Actor "Scheduler" as User
participant MonitoringService
participant DeploymentService
participant DataService
participant PreprocessingService
participant OrchestrationService



User -> MonitoringService : check_and_trigger_retraining()
activate MonitoringService

MonitoringService -> DeploymentService : list_models()
activate DeploymentService
DeploymentService -> DeploymentService : models_names = ModelManager.list_models()
DeploymentService -> MonitoringService : Return models_names
deactivate DeploymentService

loop for model_name in models_names
    MonitoringService -> DataService : get_stock_data(symbol, start_date, end_date)
    activate DataService

    alt Data is stale or missing
        DataService -> DataService : collect_stock_data(symbol, start_date, end_date)
    end
    DataService -> MonitoringService : Return raw_stock_data
    deactivate DataService

    MonitoringService -> PreprocessingService : preprocess(raw_stock_data)
    activate PreprocessingService
    PreprocessingService -> PreprocessingService : clean_stock_data = DataCleaner.process(raw_stock_data)
    PreprocessingService -> PreprocessingService : X = FeatureBuilder.process(clean_stock_data)
    PreprocessingService -> PreprocessingService : X = FeatureSelector.process(X)
    PreprocessingService -> PreprocessingService : X = Normalizer.process(X, fit=False)
    PreprocessingService -> MonitoringService : Return X
    deactivate PreprocessingService
    
    MonitoringService -> DeploymentService : get_training_data(model_name symbol)
    activate DeploymentService
    DeploymentService -> MonitoringService : Return reference_data

    MonitoringService -> MonitoringService : data_has_drifted = DataDriftMonitor.detect_data_drift(X, reference_data)

    MonitoringService -> MonitoringService : mae_metrics = get_mae_metrics(model_name, symbol)

    note right
    Needs to query Prometheus to get the MAE metrics of the model or other way ?
    end note

    MonitoringService -> MonitoringService: performance_has_drifted = PerformanceDriftMonitor.detect_performance_degradation(mae_metrics)

    alt data_has_drifted or performance_has_drifted
        MonitoringService -> OrchestrationService : run_training_pipeline(model_name, symbol)
    end
end


@enduml