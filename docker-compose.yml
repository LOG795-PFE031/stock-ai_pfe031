services:
  # ============================
  # üß† Database
  # ============================
  postgres-prefect:
    image: postgres:14
    container_name: postgres-prefect
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect
      POSTGRES_DB: prefect
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefect -d prefect"]
      interval: 10s
      timeout: 10s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: mysql-stock-ai
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: stocks
    volumes:
      - ./data/mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices_auth
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "admin",
          "-padmin",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  # ============================
  # ‚öôÔ∏è Prefect Server (for UI)
  # ============================
  prefect-server:
    image: prefecthq/prefect:3-latest
    container_name: prefect-server
    ports:
      - "4200:4200"
    volumes:
      - ./data/prefect_data:/root/.prefect
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres-prefect:5432/prefect
    command: prefect server start --host 0.0.0.0
    networks:
      - microservices_auth
    depends_on:
      postgres-prefect:
        condition: service_healthy
    restart: always

  # ============================
  # üß™ MLflow Server (for UI)
  # ============================
  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: ["mlflow", "server", "--host", "0.0.0.0", "--port", "5000"]
    working_dir: /mlflow
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 5s
      timeout: 10s
      retries: 5

  # ============================
  #  Main application
  # ============================
  stock-ai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stock-ai
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./mlruns:/app/mlruns
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - PREFECT_API_URL=http://prefect-server:4200/api
    networks:
      - microservices_auth
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      prefect-server:
        condition: service_started
      mlflow-server:
        condition: service_healthy

  # ============================
  # üìä Monitoring Stack
  # ============================

  prometheus:
    image: prom/prometheus
    container_name: stock-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices_auth
    depends_on:
      - stock-ai

  grafana:
    image: grafana/grafana
    container_name: stock-ai-grafana
    ports:
      - "3000:3000"
    volumes:
      # persist Grafana DB, plugins, etc.
      - ./monitoring/grafana:/var/lib/grafana
      # provisioning folder (YAML), it imports all those JSONs automatically every few sec and where to find them.
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - microservices_auth
    depends_on:
      - prometheus

  # ============================
  # üîê Authentification Service
  # ============================

  auth-service:
    container_name: auth-service
    hostname: auth-service
    image: auth-service
    ports:
      - "55604:8081"
    build:
      context: ./auth
      dockerfile: AuthService/Dockerfile
    networks:
      - microservices_auth
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  postgres:
    container_name: sql
    image: postgres:latest
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: "rabbitmq:3.13.7-management"
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  microservices_auth:
    name: microservices_auth
    driver: bridge
