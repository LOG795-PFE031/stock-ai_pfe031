services:
  # ============================
  # üß™ MLflow Service
  # ============================

  # MLFlow Backstore DB
  mlflow-postgres:
    image: postgres:latest
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: mlflow_user
      POSTGRES_PASSWORD: mlflow_password
      POSTGRES_DB: mlflow_db
    ports:
      - "5434:5432"
    volumes:
      - ./data/mlflow_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_auth
    restart: on-failure

  # MLFlow artifacts DB
  mlflow-minio:
    image: minio/minio
    container_name: mlflow-minio
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio_data:/data
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: on-failure

  # Command to create a bucket for minio
  minio-create-bucket:
    image: minio/mc
    depends_on:
      mlflow-minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
      mc alias set minio http://mlflow-minio:9000 minio_user minio_password &&
      if ! mc ls minio/mlflow; then
        mc mb minio/mlflow;
      else
        echo 'bucket already exists';
      fi
      "
    networks:
      - microservices_auth
    restart: "no"

  # Mlflow server
  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    environment:
      MLFLOW_TRACKING_URI: postgresql://mlflow_user:mlflow_password@mlflow-postgres:5432/mlflow_db
      MLFLOW_S3_ENDPOINT_URL: http://mlflow-minio:9000
      AWS_ACCESS_KEY_ID: minio_user
      AWS_SECRET_ACCESS_KEY: minio_password
      AWS_DEFAULT_REGION: us-east-1
    ports:
      - "5000:5000"
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://mlflow_user:mlflow_password@mlflow-postgres:5432/mlflow_db --artifacts-destination s3://mlflow/artifacts
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    depends_on:
      - mlflow-postgres
      - mlflow-minio
      - minio-create-bucket
    restart: on-failure

  # ============================
  # ‚öôÔ∏è Prefect Service
  # ============================

  # Prefect DB
  prefect-postgres:
    image: postgres:14
    container_name: prefect-postgres
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: prefect
    volumes:
      - ./data/prefect_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d prefect"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Prefect server
  prefect-server:
    image: prefecthq/prefect:3-latest
    container_name: prefect-server
    ports:
      - "4200:4200"
    volumes:
      - ./data/prefect_data:/root/.prefect
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://admin:admin@prefect-postgres:5432/prefect
    command: prefect server start --host 0.0.0.0
    networks:
      - microservices_auth
    depends_on:
      prefect-postgres:
        condition: service_healthy
    restart: always

  # ============================
  # üìä Monitoring Stack
  # ============================

  prometheus:
    image: prom/prometheus
    container_name: stock-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices_auth

  grafana:
    image: grafana/grafana
    container_name: stock-ai-grafana
    ports:
      - "3000:3000"
    volumes:
      # persist Grafana DB, plugins, etc.
      - ./grafana:/var/lib/grafana
      # provisioning folder (YAML), it imports all those JSONs automatically every few sec and where to find them.
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - microservices_auth
    depends_on:
      - prometheus

  # ============================
  # üåê API Gateway Service
  # ============================

  api-gateway:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app/api
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
    networks:
      - microservices_auth
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      prefect-server:
        condition: service_started
      mlflow-server:
        condition: service_healthy

  # ============================
  # üß† Data Service
  # ============================

  # Dedicated Stock Data DB
  postgres-stock-data:
    image: postgres:14
    container_name: postgres-stock-data
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: stockuser
      POSTGRES_PASSWORD: stockpass
      POSTGRES_DB: stockdata
    volumes:
      - ./data/data_ingestion/postgres:/var/lib/postgresql/data
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockuser -d stockdata"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Data (Ingestion) service
  data-service:
    build:
      context: .
      dockerfile: services/data_ingestion/Dockerfile
    container_name: data-service
    ports:
      - "8001:8000"
    environment:
      # Dedicated stock database config
      - STOCK_DB_HOST=postgres-stock-data
      - STOCK_DB_PORT=5432
      - STOCK_DB_USER=stockuser
      - STOCK_DB_PASSWORD=stockpass
      - STOCK_DB_NAME=stockdata
    volumes:
      - ./services/data_ingestion:/app/services/data_ingestion
    networks:
      - microservices_auth
    depends_on:
      postgres-stock-data:
        condition: service_healthy
    restart: on-failure

  # ============================
  # üì∞ News Service
  # ============================
  news-service:
    build:
      context: .
      dockerfile: services/news/Dockerfile
    container_name: news-service
    ports:
      - "8002:8000"
    networks:
      - microservices_auth
    restart: on-failure

  # ============================
  # üßÆ Data Processing Service
  # ============================
  data-processing-service:
    build:
      context: .
      dockerfile: services/data_processing/Dockerfile
    container_name: data-processing-service
    ports:
      - "8003:8000"
    volumes:
      - ./data/scalers:/app/data/scalers
      - ./services/data_processing:/app/services/data_processing
    networks:
      - microservices_auth
    restart: on-failure

  # Dedicated Prediction Data DB
  postgres-prediction-data:
    image: postgres:14
    container_name: postgres-prediction-data
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: predictionuser
      POSTGRES_PASSWORD: predictionpass
      POSTGRES_DB: predictiondata
    volumes:
      - ./data/orchestration_data:/var/lib/postgresql/data
    networks:
      - microservices_auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U predictionuser -d predictiondata"]
      interval: 10s
      timeout: 10s
      retries: 5

  # ============================
  # üèãÔ∏è‚Äç‚ôÇÔ∏è Model Training Service
  # ============================
  training-service:
    build:
      context: .
      dockerfile: services/training/Dockerfile
    container_name: training-service
    ports:
      - "8004:8000"
    volumes:
      - ./data/models:/app/data/models
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
    networks:
      - microservices_auth
    restart: on-failure
    depends_on:
      mlflow-server:
        condition: service_healthy

  # ============================
  # üöÄ Model Deployment (Prediction) Service
  # ============================
  deployment-service:
    build:
      context: .
      dockerfile: services/deployment/Dockerfile
    container_name: deployment-service
    ports:
      - "8005:8000"
    volumes:
      - ./services/deployment:/app/services/deployment
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
    networks:
      - microservices_auth
    restart: on-failure
    depends_on:
      mlflow-server:
        condition: service_healthy

  # ============================
  # üìà Model Evaluation Service
  # ============================
  evaluation-service:
    build:
      context: .
      dockerfile: services/evaluation/Dockerfile
    container_name: evaluation-service
    ports:
      - "8006:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
    networks:
      - microservices_auth
    restart: on-failure
    depends_on:
      mlflow-server:
        condition: service_healthy

  # ============================
  # üìâ Model Monitoring Service
  # ============================
  monitoring-service:
    build:
      context: .
      dockerfile: services/monitoring/Dockerfile
    container_name: monitoring-service
    ports:
      - "8007:8000"
    volumes:
      - ./services/monitoring:/app/services/monitoring
    networks:
      - microservices_auth
    restart: on-failure
    depends_on:
      deployment-service:
        condition: service_healthy
      orchestration-service:
        condition: service_healthy

  # ============================
  # üîÄ Orchestration Service
  # ============================
  orchestration-service:
    build:
      context: .
      dockerfile: services/orchestration/Dockerfile
    container_name: orchestration-service
    ports:
      - 8008:8000
    volumes:
      - ./services/orchestration:/app/services/orchestration
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
      # Dedicated prediction database config
      - PREDICTION_DB_HOST=postgres-prediction-data
      - PREDICTION_DB_PORT=5432
      - PREDICTION_DB_USER=predictionuser
      - PREDICTION_DB_PASSWORD=predictionpass
      - PREDICTION_DB_NAME=predictiondata
    networks:
      - microservices_auth
    restart: on-failure
    depends_on:
      prefect-server:
        condition: service_started

# ============================
# üîó Networks
# ============================
networks:
  microservices_auth:
    external: true
    name: microservices_auth
